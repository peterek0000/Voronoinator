#####################################################################
#   Macros
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    #MMU
    {% set REFERENCED_TOOLS = params.REFERENCED_TOOLS|default("")|string %}
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %}

    #Start Heating the bed and chamber
    M140 S{BED_TEMP}
    M141 S{CHAMBER_TEMP}
    #MMU check tools
    {% if REFERENCED_TOOLS == "!referenced_tools!" %}
        RESPOND MSG="Happy Hare gcode pre-processor is diabled"
        {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% elif REFERENCED_TOOLS == "" %}
        RESPOND MSG="Happy Hare single color print"
        {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% endif %}

    #:

    #MMU_CHECK_GATE TOOLS={REFERENCED_TOOLS}
    #M104 S0
    # Heat bed for probing
    M190 S{BED_TEMP}
    # Use absolute coordinates
    G90

    # Optional: load initial tool
    MMU_CHANGE_TOOL STANDALONE=1 TOOL={INITIAL_TOOL} 
    M109 S150
    BRUSH_NOZZLE
    G1 X330 F6000
        # Heat extruder to 150

    # Home the printer
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X         ;home X before travel moves
        G28 Y         ;home X before travel moves
    {% endif %}
    G28 Z
    Z_TILT_ADJUST

    # KAMP bed mesh
    BED_MESH_CALIBRATE

    # Wait for chamber to reach temp
    #M191 S{CHAMBER_TEMP}

    # Wait for extruder to reach temp
    M109 S{EXTRUDER_TEMP}
    BRUSH_NOZZLE
    # Move the nozzle near the bed
    #G1 Z5 F3000
    #Purge
    VORON_PURGE
    # Start printing!

    SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
    STATUS_PRINTING                                  # Sets SB-leds to printing-mode
    
    G90                                              # Absolut position
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    G92 E0

    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    BRUSH_NOZZLE
    #MMU__HOME FORCE_UNLOAD=1
    # Wait for filament to cool to prevent oozing
    M109 S150
    G90
    G1 X330 F6000
    G1 X330 F6000
    G90                                      ; absolute positioning
    TURN_OFF_HEATERS
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[gcode_macro BRUSH_NOZZLE]
# heat nozzle for best results
variable_x1: 225 # left of brush   <<<edit this value>>>
variable_x2: 255 # right or brush  <<<edit this value>>>
variable_y1: 350 # y value         <<<edit this value>>>
#variable_z1: 9999 # nozzle height   <<<edit this value>>>
gcode:
    M400  ;wait for buffer to clear
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X         ;home X before travel moves
        G28 Y         ;home X before travel moves
    {% endif %}

    G90
    G0 X{x1+15} Y{y1-50} F10000  ;safe position 
    G0 X{x1} Y{y1-50} F10000  ;safe position
    G0 X{x1-20} Y{y1} F10000  ;left position
    
    M117 Brushing Nozzle
    G0 X{x2} F10000        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1-20}        ;move left
    G0 X{x2+10}        ;move right
    G4 P1000
    M117 Nozzle Cleaned

[gcode_macro CLEAN_NOZZLE]
variable_x1: 235 # left of brush   <<<edit this value>>>
variable_x2: 265 # right or brush  <<<edit this value>>>
variable_y1: 350 # y value         <<<edit this value>>>

gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(235)|float %}
    M400  ;wait for buffer to clear
    {% if "xy" not in printer.toolhead.homed_axes %}
    G28         ;home axes before travel moves
    {% endif %}
    M104 S{EXTRUDER_TEMP} #{printer["gcode_macro CLEAN_NOZZLE"].EXTRUDER_TEMP} 
    G90
    G0 X{x1-20} Y{y1}  ;left position
    M109 S{EXTRUDER_TEMP} #{printer["gcode_macro CLEAN_NOZZLE"].EXTRUDER_TEMP} 
    G92 E0 ; Reset extrusion distance 
    M104 S150 ; set extruder temp to 150C
    G1 E15 F90 ; Extrude 50 mm of filament at 1.5 mm/s 
    BRUSH_NOZZLE
    M109 S150 ; wait for temperature to be reached
    M104 S0
    BRUSH_NOZZLE

## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 350.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 350.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 5.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 4.0   ; the value to retract while PAUSE
variable_cancel_retract   : 10.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 2.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode:

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True

